// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Model.Models
{
    public partial class MPP_Context : DbContext
    {
        public MPP_Context()
        {
        }

        public MPP_Context(DbContextOptions<MPP_Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Dimension> Dimension { get; set; }
        public virtual DbSet<Entity> Entity { get; set; }
        public virtual DbSet<EntityType> EntityType { get; set; }
        public virtual DbSet<EntityTypeAttr> EntityTypeAttr { get; set; }
        public virtual DbSet<EntityTypeAttrLov> EntityTypeAttrLov { get; set; }
        public virtual DbSet<EntityTypeRelation> EntityTypeRelation { get; set; }
        public virtual DbSet<MppConfig> MppConfig { get; set; }
        public virtual DbSet<MppUser> MppUser { get; set; }
        public virtual DbSet<MppUserPrivilage> MppUserPrivilage { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Dimension>(entity =>
            {
                entity.HasKey(e => e.DimensionName);

                entity.ToTable("DIMENSION", "MPP_CORE");

                entity.Property(e => e.DimensionName)
                    .HasMaxLength(25)
                    .HasColumnName("DIMENSION_NAME")
                    .IsFixedLength();

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("DISPLAY_NAME")
                    .IsFixedLength();

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.FlattenedTableName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("FLATTENED_TABLE_NAME")
                    .IsFixedLength();
            });

            modelBuilder.Entity<Entity>(entity =>
            {
                entity.HasKey(e => e.Oid);

                entity.ToTable("ENTITY", "MPP_CORE");

                entity.Property(e => e.Oid)
                    .ValueGeneratedNever()
                    .HasColumnName("OID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("CREATED_BY");

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.EntityEndDate)
                    .HasColumnType("date")
                    .HasColumnName("ENTITY_END_DATE");

                entity.Property(e => e.EntityLatestName)
                    .HasMaxLength(255)
                    .HasColumnName("ENTITY_LATEST_NAME");

                entity.Property(e => e.EntityStartDate)
                    .HasColumnType("date")
                    .HasColumnName("ENTITY_START_DATE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.InternalCode)
                    .HasMaxLength(500)
                    .HasColumnName("INTERNAL_CODE");

                entity.Property(e => e.LastUpdatedTimeStamp)
                    .HasColumnType("datetime")
                    .HasColumnName("LAST_UPDATED_TIME_STAMP");

                entity.Property(e => e.LatestFlag).HasColumnName("LATEST_FLAG");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(50)
                    .HasColumnName("MODIFIED_BY");

                entity.Property(e => e.SourceSystemName)
                    .HasMaxLength(50)
                    .HasColumnName("SOURCE_SYSTEM_NAME");

                entity.Property(e => e.SuppliedCode1)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE1");

                entity.Property(e => e.SuppliedCode2)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE2");

                entity.Property(e => e.SuppliedCode3)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE3");

                entity.Property(e => e.SuppliedCode4)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE4");

                entity.Property(e => e.SuppliedCode5)
                    .HasMaxLength(500)
                    .HasColumnName("SUPPLIED_CODE5");
            });

            modelBuilder.Entity<EntityType>(entity =>
            {
                entity.ToTable("ENTITY_TYPE", "MPP_CORE");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.DefaultSortBy).HasColumnName("DEFAULT_SORT_BY");

                entity.Property(e => e.DefaultSortOrder)
                    .HasMaxLength(10)
                    .HasColumnName("DEFAULT_SORT_ORDER");

                entity.Property(e => e.DimensionDisplayName)
                    .HasMaxLength(100)
                    .HasColumnName("DIMENSION_DISPLAY_NAME");

                entity.Property(e => e.DimensionName)
                    .HasMaxLength(100)
                    .HasColumnName("DIMENSION_NAME");

                entity.Property(e => e.DisplayName)
                    .HasMaxLength(100)
                    .HasColumnName("DISPLAY_NAME");

                entity.Property(e => e.DisplayOrder)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.InputTableName)
                    .HasMaxLength(100)
                    .HasColumnName("INPUT_TABLE_NAME");

                entity.Property(e => e.IsManyToMany).HasColumnName("IS_MANY_TO_MANY");

                entity.Property(e => e.IsStrongEntity).HasColumnName("IS_STRONG_ENTITY");

                entity.Property(e => e.IsSubType).HasColumnName("IS_SUB_TYPE");

                entity.Property(e => e.IsSuperType).HasColumnName("IS_SUPER_TYPE");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("NAME");
            });

            modelBuilder.Entity<EntityTypeAttr>(entity =>
            {
                entity.HasKey(e => new { e.EntityTypeId, e.AttrName })
                    .HasName("ENTITY_TYPE_ATTR_PK");

                entity.ToTable("ENTITY_TYPE_ATTR", "MPP_CORE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(500)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.AttrDataType)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("ATTR_DATA_TYPE");

                entity.Property(e => e.AttrDisplayName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DISPLAY_NAME");

                entity.Property(e => e.AttrDisplayOrder)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("ATTR_DISPLAY_ORDER");

                entity.Property(e => e.AttrLength).HasColumnName("ATTR_LENGTH");

                entity.Property(e => e.AttrPrecision).HasColumnName("ATTR_PRECISION");

                entity.Property(e => e.CasDrop)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("CAS_DROP");

                entity.Property(e => e.CasQuery)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("CAS_QUERY");

                entity.Property(e => e.ColumnSequence).HasColumnName("COLUMN_SEQUENCE");

                entity.Property(e => e.Derivation)
                    .HasMaxLength(250)
                    .HasColumnName("DERIVATION");

                entity.Property(e => e.DisplayType)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("DISPLAY_TYPE");

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.HistoryQuery)
                    .IsUnicode(false)
                    .HasColumnName("HISTORY_QUERY");

                entity.Property(e => e.IsDerived).HasColumnName("IS_DERIVED");

                entity.Property(e => e.IsHyperlinked).HasColumnName("IS_HYPERLINKED");

                entity.Property(e => e.IsListable).HasColumnName("IS_LISTABLE");

                entity.Property(e => e.IsMandatoryFlag).HasColumnName("IS_MANDATORY_FLAG");

                entity.Property(e => e.IsPartOfCode).HasColumnName("IS_PART_OF_CODE");

                entity.Property(e => e.IsSearchable).HasColumnName("IS_SEARCHABLE");

                entity.Property(e => e.Isvisible)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ISVISIBLE");

                entity.Property(e => e.ListBoxQuery)
                    .IsUnicode(false)
                    .HasColumnName("LIST_BOX_QUERY");

                entity.Property(e => e.ParentEntityTypeId).HasColumnName("PARENT_ENTITY_TYPE_ID");
            });

            modelBuilder.Entity<EntityTypeAttrLov>(entity =>
            {
                entity.HasKey(e => new { e.AttrName, e.EntityTypeId, e.ValidValues })
                    .HasName("PK__ENTITY_T__6B57F4BB10120E73");

                entity.ToTable("ENTITY_TYPE_ATTR_LOV", "MPP_CORE");

                entity.Property(e => e.AttrName)
                    .HasMaxLength(500)
                    .HasColumnName("ATTR_NAME");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.ValidValues)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VALID_VALUES");

                entity.Property(e => e.SortOrder).HasColumnName("SORT_ORDER");

                entity.Property(e => e.ValueName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("VALUE_NAME");

                entity.HasOne(d => d.EntityTypeAttr)
                    .WithMany(p => p.EntityTypeAttrLov)
                    .HasForeignKey(d => new { d.EntityTypeId, d.AttrName })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ETAL_ETID_ANAME");
            });

            modelBuilder.Entity<EntityTypeRelation>(entity =>
            {
                entity.HasKey(e => new { e.EntityTypeId, e.ParentEntityTypeId })
                    .HasName("ENTITY_TYPE_RELATION_PK");

                entity.ToTable("ENTITY_TYPE_RELATION", "MPP_CORE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.ParentEntityTypeId).HasColumnName("PARENT_ENTITY_TYPE_ID");

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.FlatFlag).HasColumnName("FLAT_FLAG");

                entity.Property(e => e.IsIdentifyingRelation).HasColumnName("IS_IDENTIFYING_RELATION");

                entity.Property(e => e.IsMandatoryFlag).HasColumnName("IS_MANDATORY_FLAG");

                entity.Property(e => e.IsTimeVariantFlag).HasColumnName("IS_TIME_VARIANT_FLAG");

                entity.Property(e => e.ToBeFlattened).HasColumnName("TO_BE_FLATTENED");
            });

            modelBuilder.Entity<MppConfig>(entity =>
            {
                entity.HasKey(e => e.ParamName)
                    .HasName("MDM_CONFIG_PK");

                entity.ToTable("MPP_CONFIG", "MPP_CORE");

                entity.Property(e => e.ParamName)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PARAM_NAME");

                entity.Property(e => e.ParamValue)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("PARAM_VALUE");
            });

            modelBuilder.Entity<MppUser>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("MPP_USER", "MPP_CORE");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.AdminFlag).HasColumnName("ADMIN_FLAG");

                entity.Property(e => e.ApproverFlag).HasColumnName("APPROVER_FLAG");

                entity.Property(e => e.AuthType).HasColumnName("AUTH_TYPE");

                entity.Property(e => e.EmailId)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL_ID");

                entity.Property(e => e.LanguageCode)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("LANGUAGE_CODE");

                entity.Property(e => e.Password)
                    .HasMaxLength(500)
                    .HasColumnName("PASSWORD");

                entity.Property(e => e.RoleName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ROLE_NAME");

                entity.Property(e => e.UserLevel)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("USER_LEVEL");

                entity.Property(e => e.UserName)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("USER_NAME");
            });

            modelBuilder.Entity<MppUserPrivilage>(entity =>
            {
                entity.HasKey(e => new { e.EntityTypeId, e.UserId })
                    .HasName("MPP_USER_PRIVILAGE_PK");

                entity.ToTable("MPP_USER_PRIVILAGE", "MPP_CORE");

                entity.Property(e => e.EntityTypeId).HasColumnName("ENTITY_TYPE_ID");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.Approver)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("APPROVER");

                entity.Property(e => e.CreateFlag).HasColumnName("CREATE_FLAG");

                entity.Property(e => e.EditLevel)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("EDIT_LEVEL");

                entity.Property(e => e.ImportFlag).HasColumnName("IMPORT_FLAG");

                entity.Property(e => e.ReadFlag).HasColumnName("READ_FLAG");

                entity.Property(e => e.RoleId).HasColumnName("ROLE_ID");

                entity.Property(e => e.UpdateFlag).HasColumnName("UPDATE_FLAG");
            });

            modelBuilder.HasSequence<int>("EditLevel", "MPP_CORE");

            modelBuilder.HasSequence<int>("OIDSEQUENCE", "MPP_CORE");

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}